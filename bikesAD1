<!DOCTYPE html>
<html lang="en">
<!-- Previous head section remains the same until the tab-container -->

    <div class="tab-container no-print">
        <div class="tab-buttons">
            <button class="tab-button active" onclick="showTab('issuing')">Bicycle Issuing</button>
            <button class="tab-button" onclick="showTab('faulty')">Faulty Bicycles</button>
            <button class="tab-button" onclick="showTab('arrival')">Arrival Bicycles</button>
        </div>
    </div>

    <!-- Previous Bicycle Issuing Tab and Faulty Bicycles Tab remain the same -->

    <!-- New Arrival Bicycles Tab -->
    <div id="arrivalTab" class="tab-content">
        <div class="search-section no-print">
            <div class="search-group">
                <input type="text" id="arrivalBicycleSearch" placeholder="Search arrival bicycle number...">
                <button onclick="searchArrivalBicycle()">Search</button>
            </div>
            <div class="search-group">
                <button onclick="resetArrivalSearch()">Reset</button>
                <button class="print-btn" onclick="printArrivalBicycles()">Print Arrival Records</button>
            </div>
        </div>

        <form id="arrivalBicycleForm" class="form-section no-print">
            <h2>Record Bicycle Arrival</h2>
            <input type="hidden" id="arrivalEditIndex">
            
            <div class="form-grid">
                <div>
                    <label for="arrivalBicycleNumber">Bicycle Number:</label>
                    <input type="text" id="arrivalBicycleNumber" required>
                </div>
                
                <div>
                    <label for="supplier">Supplier:</label>
                    <input type="text" id="supplier" required>
                </div>

                <div>
                    <label for="arrivalDate">Arrival Date:</label>
                    <input type="date" id="arrivalDate" required>
                </div>

                <div>
                    <label for="bicycleType">Bicycle Type:</label>
                    <select id="bicycleType" required>
                        <option value="adult">Adult</option>
                        <option value="child">Child</option>
                        <option value="tandem">Tandem</option>
                    </select>
                </div>

                <div>
                    <label for="condition">Condition:</label>
                    <select id="condition" required>
                        <option value="new">New</option>
                        <option value="excellent">Excellent</option>
                        <option value="good">Good</option>
                        <option value="fair">Fair</option>
                    </select>
                </div>

                <div>
                    <label for="arrivalNotes">Notes:</label>
                    <textarea id="arrivalNotes"></textarea>
                </div>
            </div>
            
            <button type="submit">Record Arrival</button>
        </form>

        <table id="arrivalBicycleTable">
            <thead>
                <tr>
                    <th>Bicycle Number</th>
                    <th>Supplier</th>
                    <th>Arrival Date</th>
                    <th>Bicycle Type</th>
                    <th>Condition</th>
                    <th>Status</th>
                    <th class="no-print">Actions</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>

    <!-- Add this to your existing script section -->
    <script>
    // Global variables for arrival bicycles
    let arrivalBicycles = [];
    const arrivalForm = document.getElementById('arrivalBicycleForm');
    const arrivalTable = document.getElementById('arrivalBicycleTable').getElementsByTagName('tbody')[0];

    // Load arrival bicycles
    function loadArrivalBicycles() {
        db.collection('arrivalBicycles')
            .orderBy('timestamp', 'desc')
            .get()
            .then((snapshot) => {
                arrivalBicycles = [];
                snapshot.forEach((doc) => {
                    arrivalBicycles.push({ id: doc.id, ...doc.data() });
                });
                displayArrivalBicycles();
            })
            .catch((error) => {
                console.error("Error loading arrival bicycles: ", error);
                showNotification('Error loading arrival bicycles', 'error');
            });
    }

    // Display arrival bicycles
    function displayArrivalBicycles(bicyclesToShow = arrivalBicycles) {
        arrivalTable.innerHTML = '';
        bicyclesToShow.forEach((bicycle, index) => {
            const row = arrivalTable.insertRow();
            row.innerHTML = `
                <td>${bicycle.bicycleNumber}</td>
                <td>${bicycle.supplier}</td>
                <td>${formatDate(bicycle.arrivalDate)}</td>
                <td>${bicycle.bicycleType}</td>
                <td>${bicycle.condition}</td>
                <td>${bicycle.status || 'Available'}</td>
                <td class="no-print">
                    <button class="edit-btn" onclick="editArrivalBicycle(${index})">Edit</button>
                    <button class="delete-btn" onclick="deleteArrivalBicycle('${bicycle.id}')">Delete</button>
                    ${bicycle.status !== 'In Use' ? 
                        `<button class="return-btn" onclick="markAsInUse('${bicycle.id}')">Mark In Use</button>` : 
                        `<button class="return-btn" onclick="markAsAvailable('${bicycle.id}')">Mark Available</button>`
                    }
                </td>
            `;
        });
    }

    // Arrival bicycle form submission
    arrivalForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const arrivalBicycle = {
            bicycleNumber: document.getElementById('arrivalBicycleNumber').value,
            supplier: document.getElementById('supplier').value,
            arrivalDate: document.getElementById('arrivalDate').value,
            bicycleType: document.getElementById('bicycleType').value,
            condition: document.getElementById('condition').value,
            notes: document.getElementById('arrivalNotes').value,
            status: 'Available',
            timestamp: firebase.firestore.FieldValue.serverTimestamp()
        };

        const editIndex = document.getElementById('arrivalEditIndex').value;

        if (editIndex !== '') {
            updateArrivalBicycle(arrivalBicycle, editIndex);
        } else {
            addArrivalBicycle(arrivalBicycle);
        }
    });

    // Add new arrival bicycle
    function addArrivalBicycle(arrivalBicycle) {
        db.collection('arrivalBicycles').add(arrivalBicycle)
            .then(() => {
                showNotification('Arrival bicycle recorded successfully');
                arrivalForm.reset();
                loadArrivalBicycles();
            })
            .catch((error) => {
                console.error("Error adding arrival bicycle: ", error);
                showNotification('Error recording arrival bicycle', 'error');
            });
    }

    // Update arrival bicycle
    function updateArrivalBicycle(arrivalBicycle, index) {
        const docId = arrivalBicycles[index].id;
        db.collection('arrivalBicycles').doc(docId).update(arrivalBicycle)
            .then(() => {
                showNotification('Arrival bicycle updated successfully');
                arrivalForm.reset();
                document.getElementById('arrivalEditIndex').value = '';
                loadArrivalBicycles();
            })
            .catch((error) => {
                console.error("Error updating arrival bicycle: ", error);
                showNotification('Error updating arrival bicycle', 'error');
            });
    }

    // Edit arrival bicycle
    function editArrivalBicycle(index) {
        const bicycle = arrivalBicycles[index];
        document.getElementById('arrivalBicycleNumber').value = bicycle.bicycleNumber;
        document.getElementById('supplier').value = bicycle.supplier;
        document.getElementById('arrivalDate').value = bicycle.arrivalDate;
        document.getElementById('bicycleType').value = bicycle.bicycleType;
        document.getElementById('condition').value = bicycle.condition;
        document.getElementById('arrivalNotes').value = bicycle.notes || '';
        document.getElementById('arrivalEditIndex').value = index;
    }

    // Delete arrival bicycle
    function deleteArrivalBicycle(id) {
        if (confirm('Are you sure you want to delete this arrival record?')) {
            db.collection('arrivalBicycles').doc(id).delete()
                .then(() => {
                    showNotification('Arrival record deleted successfully');
                    loadArrivalBicycles();
                })
                .catch((error) => {
                    console.error("Error deleting arrival record: ", error);
                    showNotification('Error deleting arrival record', 'error');
                });
        }
    }

    // Mark bicycle as in use
    function markAsInUse(id) {
        if (confirm('Mark this bicycle as in use?')) {
            db.collection('arrivalBicycles').doc(id).update({
                status: 'In Use',
                lastStatusUpdate: new Date().toISOString()
            })
            .then(() => {
                showNotification('Bicycle marked as in use');
                loadArrivalBicycles();
            })
            .catch((error) => {
                console.error("Error marking as in use: ", error);
                showNotification('Error marking as in use', 'error');
            });
        }
    }

    // Mark bicycle as available
    function markAsAvailable(id) {
        if (confirm('Mark this bicycle as available?')) {
            db.collection('arrivalBicycles').doc(id).update({
                status: 'Available',
                lastStatusUpdate: new Date().toISOString()
            })
            .then(() => {
                showNotification('Bicycle marked as available');
                loadArrivalBicycles();
            })
            .catch((error) => {
                console.error("Error marking as available: ", error);
                showNotification('Error marking as available', 'error');
            });
        }
    }

    // Search arrival bicycles
    function searchArrivalBicycle() {
        const searchTerm = document.getElementById('arrivalBicycleSearch').value.toLowerCase();
        if (!searchTerm) {
            alert('Please enter a bicycle number');
            return;
        }
        const filtered = arrivalBicycles.filter(bicycle => 
            bicycle.bicycleNumber.toLowerCase().includes(searchTerm)
        );
        displayArrivalBicycles(filtered);
    }

    // Reset arrival search
    function resetArrivalSearch() {
        document.getElementById('arrivalBicycleSearch').value = '';
        displayArrivalBicycles();
    }

    // Print arrival bicycles
    function printArrivalBicycles() {
        const printWindow = window.open('', '_blank');
        const today = new Date().toLocaleDateString();

        printWindow.document.write(`
            <!DOCTYPE html>
            <html>
            <head>
                <title>Bicycle Arrival Records - ${today}</title>
                <style>
                    body { font-family: Arial, sans-serif; padding: 20px; }
                    h1 { color: #2c3e50; }
                    table { 
                        width: 100%; 
                        border-collapse: collapse; 
                        margin-top: 20px;
                    }
                    th, td { 
                        border: 1px solid #ddd; 
                        padding: 8px; 
                        text-align: left; 
                    }
                    th { 
                        background-color: #f5f5f5; 
                    }
                </style>
            </head>
            <body>
                <h1>Bicycle Arrival Records - ${today}</h1>
                <table>
                    <thead>
                        <tr>
                            <th>Bicycle Number</th>
                            <th>Supplier</th>
                            <th>Arrival Date</th>
                            <th>Bicycle Type</th>
                            <th>Condition</th>
                            <th>Status</th>
                            <th>Notes</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${arrivalBicycles.map(bicycle => `
                            <tr>
                                <td>${bicycle.bicycleNumber}</td>
                                <td>${bicycle.supplier}</td>
                                <td>${formatDate(bicycle.arrivalDate)}</td>
                                <td>${bicycle.bicycleType}</td>
                                <td>${bicycle.condition}</td>
                                <td>${bicycle.status || 'Available'}</td>
                                <td>${bicycle.notes || ''}</td>
                            </tr>
                        `).join('')}
                    </tbody>
                </table>
            </body>
            </html>
        `);
        printWindow.document.close();
        printWindow.print();
    }

    // Set today's date as default for arrival date
    document.getElementById('arrivalDate').valueAsDate = new Date();

    // Initialize arrival system
    loadArrivalBicycles();

    // Real-time updates for arrival bicycles
    db.collection('arrivalBicycles').onSnapshot((snapshot) => {
        arrivalBicycles = [];
        snapshot.forEach((doc) => {
            arrivalBicycles.push({ id: doc.id, ...doc.data() });
        });
        displayArrivalBicycles();
    });
    </script>

</body>
</html>
